//g++ test.cpp -std=c++11 -isystem benchmark/include -Lbenchmark/build/src -lbenchmark -lpthread -o benchmark_res
#include <iostream>
#include <numeric>
#include <bits/stdc++.h> 
#include <benchmark/benchmark.h>
#include "../include/algorithms.h"

//BINARY SEARCH


//POWERING A NUMBER 
static void BM_numberPowering(benchmark::State& state) 
{
    int a = rand() % 100;

    for (auto _ : state)
    {
        //current function under benchmarking
        benchmark::DoNotOptimize(numberPowering(a, state.range(0)));
    }
    state.SetComplexityN(state.range(0));
}

//BENCHMARK(BM_numberPowering)->RangeMultiplier(2)->Range(1<<2, 1<<20)->Complexity();

//STRASSEN
static void BM_strassen(benchmark::State& state) 
{
    int i, j; 
    lld** matB; 
    lld** matA;

    matB = new lld*[state.range(0)]; 
    matA = new lld*[state.range(0)];

    for (i = 0; i < state.range(0); i++) 
        matA[i] = new lld[state.range(0)]; 

    for (i = 0; i < state.range(0); i++)
        for (j = 0; j < state.range(0); j++)
            matA[i][j] = rand() % 100;

    for (i = 0; i < state.range(0); i++) 
        matB[i] = new lld[state.range(0)]; 

    for (i = 0; i < state.range(0); i++)
        for (j = 0; j < state.range(0); j++)
            matB[i][j] = rand() % 100;

    for (auto _ : state)
    {
        //current function under benchmarking
        benchmark::DoNotOptimize(Strassen(matA, matB, state.range(0), state.range(0), state.range(0)));
    }
    state.SetComplexityN(state.range(0));
}

//BENCHMARK(BM_strassen)->RangeMultiplier(2)->Range(1<<5, 1<<8)->Complexity();
//
//and call the main of the benchmark
BENCHMARK_MAIN();
